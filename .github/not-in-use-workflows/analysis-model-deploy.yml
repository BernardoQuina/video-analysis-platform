# Github actions can't build this image because it runs out of space (it includes the model files so its about 25GB)
# name: Analysis Model Deployment
# on:
#   push:
#     branches:
#       - main
#     paths:
#       - 'apps/analysis-model/**' # Only run when files in the analysis-model app directory change

# permissions: # necessary for the GitHub OIDC provider to authenticate with AWS
#   id-token: write
#   contents: read

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       # Checks out the repository code
#       - uses: actions/checkout@v4

#       # Configures AWS credentials using OIDC
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-region: eu-west-1
#           role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
#           role-session-name: GitHubActionsDeployment

#       # Logs into Amazon ECR (Elastic Container Registry) to allow pushing Docker images
#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       # Builds Docker image, tags it with the Git commit SHA, and pushes it to ECR
#       - name: Build, tag, and push image of poller to Amazon ECR
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ secrets.POLLER_ECR_REPOSITORY_NAME }}
#           SHA: ${{ github.sha }}
#         run: |
#           # Extract first 7 characters of the SHA
#           SHORT_SHA=${SHA:0:7}

#           # Build the Docker image of the poller
#           docker build \
#            -t $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA \
#            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest apps/analysis-model

#           # Push the Docker image
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

#       # ECS service rolling update with the new image
#       - name: ECS service update
#         env:
#           CLUSTER_NAME: ${{ secrets.ANALYSIS_MODEL_CLUSTER_NAME }}
#           SERVICE_NAME: ${{ secrets.ANALYSIS_MODEL_SERVICE_NAME }}
#         run: |
#           # Update ECS service with latest image
#           aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment \
#           --task-definition $(aws ecs describe-task-definition --task-definition $(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[0].taskDefinition" --output text) --query "taskDefinition.taskDefinitionArn" --output text)
