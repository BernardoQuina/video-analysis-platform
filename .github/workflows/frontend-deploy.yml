name: Frontend Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'apps/frontend/**' # Only run when files in the frontend app directory change

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checks out the repository code
      - uses: actions/checkout@v4

      # Sets up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specifies Node.js version (20 is current LTS)

      # Installs project dependencies
      - name: Install dependencies
        run: npm ci # Uses clean install to ensure consistent builds (npm i alternative)

      # Builds the frontend project
      - name: Build frontend
        run: npm run build --filter=frontend # Uses Turborepo to build only the frontend

      # Configures AWS credentials for the workflow
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-3
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActionsDeployment

      # Syncs the built files to the S3 bucket
      - name: Deploy to S3
        run: |
          aws s3 sync apps/frontend/out s3://${{ secrets.FRONTEND_S3_BUCKET_NAME }}/ --delete
          aws s3 sync apps/frontend/public s3://${{ secrets.FRONTEND_S3_BUCKET_NAME }} --delete
        # The --delete flag removes files in the bucket that don't exist in the local copy

      # Creates a CloudFront invalidation to ensure the latest content is served
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        # This invalidates all paths, forcing CloudFront to fetch the latest content from S3
