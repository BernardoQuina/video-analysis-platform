name: Backend Deployment
on:
  push:
    branches:
      - main
    paths:
      - 'apps/backend/**' # Only run when files in the backend app directory change

permissions: # necessary for the GitHub OIDC provider to authenticate with AWS
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checks out the repository code
      - uses: actions/checkout@v4

      # Sets up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Installs project dependencies
      - name: Install dependencies
        run: npm ci # Uses clean install to ensure consistent builds (npm i alternative)

      # Builds the backend project
      - name: Build backend
        run: npm run build --filter=./apps/backend # Uses Turborepo to build only the backend

      # Configures AWS credentials using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-south-2
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActionsDeployment

      # Logs into Amazon ECR (Elastic Container Registry) to allow pushing Docker images
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Builds Docker image, tags it with the Git commit SHA, and pushes it to ECR
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          SHA: ${{ github.sha }}
        run: |
          # Extract first 7 characters of the SHA
          SHORT_SHA=${SHA:0:7}

          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA -t $ECR_REGISTRY/$ECR_REPOSITORY:latest apps/backend

          # Push the Docker image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # Temporarily scale up the number of EC2 instances to perform the rolling update
      # of the ECS service with the new image
      - name: Dynamic scaling and ECS service update
        env:
          CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
          SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
        run: |
          # Update ECS service with latest image
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment \
          --task-definition $(aws ecs describe-task-definition --task-definition $(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[0].taskDefinition" --output text) --query "taskDefinition.taskDefinitionArn" --output text)
