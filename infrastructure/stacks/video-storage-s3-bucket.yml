AWSTemplateFormatVersion: '2010-09-09'
Description: S3 bucket to store video uploads (and trigger lambdas)

Parameters:
  AccountId:
    Type: String
    Description: AWS account ID (needed for lambda permission)
  VideoStorageS3BucketName:
    Type: String
    Description: Name of the S3 bucket that will store uploaded videos
  TranscribeLambdaArn:
    Type: String
    Description: ARN of the Transcribe Lambda function
  RekognitionLambdaArn:
    Type: String
    Description: ARN of the Rekognition Lambda function
  ThumbnailLambdaArn:
    Type: String
    Description: ARN of the Thumbnail generator Lambda function
  MediaDomainName:
    Type: String
    Description: Domain name for the CloudFront distribution
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: The ID of the hosted zone in Route 53
  CertificateArn:
    Type: String
    Description: ARN of the manually created ACM certificate (must be in us-east-1 for CloudFront)
  StackName:
    Type: String
    Description: Name of the parent stack

Resources:
  VideoStorageS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref VideoStorageS3BucketName
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*' # TODO:  Replace with domain
            ExposedHeaders:
              - ETag
              - x-amz-server-side-encryption
              - x-amz-request-id
              - x-amz-id-2
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Bucket policy that allows the CloudFront OAI to read from the bucket
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref VideoStorageS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}
            Action: s3:GetObject
            Resource: !Sub ${VideoStorageS3Bucket.Arn}/*

  # EventBridge Rule
  S3UploadRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule to capture S3 upload events and trigger Lambda functions
      State: ENABLED
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Ref VideoStorageS3BucketName
          object:
            key:
              - prefix: videos/
      Targets:
        - Arn: !Ref TranscribeLambdaArn
          Id: TranscribeLambda
        - Arn: !Ref RekognitionLambdaArn
          Id: RekognitionLambda
        - Arn: !Ref ThumbnailLambdaArn
          Id: ThumbnailLambda

  # Grant permission for S3 to invoke the Transcribe Lambda
  TranscribeLambdaPermissionForS3:
    Type: AWS::Lambda::Permission
    Properties:
      SourceAccount: !Ref AccountId
      Action: lambda:InvokeFunction
      FunctionName: !Ref TranscribeLambdaArn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3UploadRule.Arn

  # Grant permission for S3 to invoke the Rekognition Lambda
  RekognitionLambdaPermissionForS3:
    Type: AWS::Lambda::Permission
    Properties:
      SourceAccount: !Ref AccountId
      Action: lambda:InvokeFunction
      FunctionName: !Ref RekognitionLambdaArn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3UploadRule.Arn

  # Grant permission for S3 to invoke the Thumbnail Lambda
  ThumbnailLambdaPermissionForS3:
    Type: AWS::Lambda::Permission
    Properties:
      SourceAccount: !Ref AccountId
      Action: lambda:InvokeFunction
      FunctionName: !Ref ThumbnailLambdaArn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3UploadRule.Arn

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub OAI for ${VideoStorageS3BucketName}

  VideoDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref MediaDomainName
        Origins:
          - DomainName: !GetAtt VideoStorageS3Bucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          DefaultTTL: 86400 # 1 day
          MaxTTL: 31536000 # 1 year
          MinTTL: 0
        CacheBehaviors:
          - PathPattern: /thumbnails/*
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            DefaultTTL: 86400 # 1 day
            MaxTTL: 31536000 # 1 year
            MinTTL: 0
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
    
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref MediaDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt VideoDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # This is a fixed value for CloudFront distributions

Outputs:
  VideoStorageS3BucketArn:
    Description: ARN of the video storage s3 bucket
    Value: !GetAtt VideoStorageS3Bucket.Arn
    Export:
      Name: !Sub ${StackName}-VideoStorageS3BucketArn
